@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "SiteMaster.cshtml";

    var lat = decimal.Zero;
    var lng = decimal.Zero;
    var zoom = 0;
    
    <section class="inner-page-content">
        <div class="container">
            <div class="row">

                <div class="col-md-9 col-sm-12">
                    @Html.Partial("Master/PageMainArea")

                    @if (Model.Content.HasProperty("mapLocation") && Model.Content.HasValue("mapLocation"))
                        {
                        var map = Model.Content.GetPropertyValue<AngularGoogleMaps.Model>("mapLocation");
                        lat = map.Latitude;
                        lng = map.Longitude;
                        zoom = map.Zoom;
                        
                        <div class="row">
                            <div class="col-md-12">
                                <div id="mapContainer" style="height: 400px;width:100%;"></div>
                            </div>
                        </div>
                        }


                </div>

                <div class="col-sm-3 hidden-sm hidden-xs">
                    @Html.Partial("Master/PageSideArea")
                </div>

            </div>
        </div>
    </section>
}

@section footerScripts{

    @if (lat != decimal.Zero && lng != decimal.Zero && zoom > 0)
    {

    var siteSetting = Umbraco.TypedContentAtRoot().FirstOrDefault(x => x.ContentType.Alias == "GlobalSettings");
    var locationAddress = "";
    var setAddress = new string[] { };
        
        if (siteSetting != null && siteSetting.Id > 0 && siteSetting.Descendants("SiteDetails").Any())
         {
             var siteDetailsPage = siteSetting.Descendants("SiteDetails").FirstOrDefault();
             if (siteDetailsPage != null && siteDetailsPage.Id > 0)
             {
             if (siteDetailsPage.HasProperty("siteAddress") && siteDetailsPage.HasValue("siteAddress"))
                 {
                 setAddress = siteDetailsPage.GetPropertyValue<string[]>("siteAddress");
                 locationAddress = setAddress.Aggregate(locationAddress, (current, address) => current + (address + " "));
                 }
             }
         }

        var mapAddress = "<p style=\"line-height: 20px;\"><strong>JMN Communications</strong></p><p>" + locationAddress + "</p>";

    @*<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=true"></script>*@
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyACA813sHIQ-AknlN_3G-F6YpHTmx1cst8&callback=initialize" async defer></script>

        <script type="text/javascript">
            var myLatlng;
            var map;
            var marker;

            function initialize() {
                myLatlng = new google.maps.LatLng(@lat, @lng);

                var mapOptions = {
                    zoom: @zoom,
                    center: myLatlng,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false,
                    draggable: false
                };
                map = new google.maps.Map(document.getElementById('mapContainer'), mapOptions);

                var contentString = '@Html.Raw(mapAddress)';

                var infowindow = new google.maps.InfoWindow({
                    content: contentString
                });

                marker = new google.maps.Marker({
                    position: myLatlng,
                    map: map,
                    title: 'Marker'
                });

                google.maps.event.addListener(marker,
                    'click',
                    function() {
                        infowindow.open(map, marker);
                    });
            }

        </script>

    }
}